package main

import (
	"encoding/json"
	"github.com/gorilla/mux"
	"log"
	"net/http"
	"strconv"
	"time"
)

type Note struct {
	Title string `json:"title"`
	Description string `json:"description"`
	CreateAt time.Time `json:"create_at"`
}

var noteStore  = make(map[string]Note)

var id int

func GetNoteHandler(w http.ResponseWriter, r *http.Request)  {
	var notes []Note

	for _,v := range noteStore{
		notes =  append(notes, v)
	}

	w.Header().Set("Content-Type", "application/json")
	j, error := json.Marshal(notes)

	if error != nil{
		panic(error)
	}
	w.WriteHeader(http.StatusOK)
	w.Write(j)
}


func PostNoteHandler(w http.ResponseWriter, r *http.Request)  {
	var note Note

	error := json.NewDecoder(r.Body).Decode(&note)
	if error != nil {
		panic(error)
	}

	note.CreateAt =  time.Now()
	id++
	k := strconv.Itoa(id)
	noteStore[k] = note

	w.Header().Set("Content-Type", "application/json")
	j, error := json.Marshal(note)

	if error != nil{
		panic(error)
	}
	w.WriteHeader(http.StatusCreated)
	w.Write(j)

}

func PutNoteHandler(w http.ResponseWriter, r *http.Request)  {
	vars := mux.Vars(r)
	k := vars["id"]
	var noteUpdate Note
	error := json.NewDecoder(r.Body).Decode(&noteUpdate)

	if error != nil{
        panic(error)
	}

	if note, ok := noteStore[k]; ok {
          noteUpdate.CreateAt = note.CreateAt
          delete(noteStore, k)
          noteStore[k] = noteUpdate
	}else{
		log.Println("No encontro el id %s", k)
	}
	w.WriteHeader(http.StatusNoContent)
}

func DeleteNoteHandler(w http.ResponseWriter, r *http.Request)  {
	vars := mux.Vars(r)
	k := vars["id"]

	if _, ok := noteStore[k]; ok {
		delete(noteStore, k)
	}else{
		log.Println("No encontro el id %s", k)
	}
	w.WriteHeader(http.StatusNoContent)
}



func main()  {
	r := mux.NewRouter().StrictSlash(false)
	r.HandleFunc("/api/notes", GetNoteHandler).Methods("GET")
	r.HandleFunc("/api/notes", PostNoteHandler).Methods("POST")
	r.HandleFunc("/api/notes/{id}", PutNoteHandler).Methods("PUT")
	r.HandleFunc("/api/notes/{id}", DeleteNoteHandler).Methods("DELETE")

	server := &http.Server{
		Addr:            ":4000",
		Handler:         r,
		ReadTimeout:     10 * time.Second,
		WriteTimeout:    10 * time.Second,
		MaxHeaderBytes:  1 << 20,
	}

	log.Println("Listening http://localhost:4000 ...")
	server.ListenAndServe()
}